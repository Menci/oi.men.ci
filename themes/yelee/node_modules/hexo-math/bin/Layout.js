// Generated by CoffeeScript 1.6.3
var Layout, async, escapeRegExp, file, injectScript, injectionPoint, makeLoaderCallback, util;

util = require('hexo-util');

file = require('hexo-fs');

async = require('async');

injectionPoint = "</body>";

injectScript = "<%- partial('_partial/math-jax')%>";

makeLoaderCallback = function(source, callback) {
  return function(err, src) {
    if (err != null) {
      return callback(err);
    }
    if (src == null) {
      return callback(new Error("Null source."));
    }
    source.src = src;
    source.hasHead = src.indexOf(injectionPoint) >= 0;
    source.injected = src.indexOf(injectScript) >= 0;
    return callback(null, source);
  };
};

escapeRegExp = function(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
};

module.exports = Layout = (function() {
  function Layout(path) {
    this.path = path;
    this.src = "";
    this.images = [];
    this.hasHead = false;
    this.injected = false;
  }

  Layout.prototype.load = function(callback) {
    return file.readFile(this.path, null, makeLoaderCallback(this, callback));
  };

  Layout.prototype.inject = function() {
    var r;
    r = new RegExp("" + (escapeRegExp(injectionPoint)), "g");
    return this.src = this.src.replace(r, "" + injectScript + "\n" + injectionPoint);
  };

  Layout.prototype.uninject = function() {
    var r;
    r = new RegExp("" + (escapeRegExp(injectScript)) + "\n", "g");
    return this.src = this.src.replace(r, "");
  };

  Layout.prototype.update = function(callback) {
    return file.writeFile(this.path, this.src, function(err) {
      if (err != null) {
        return typeof callback === "function" ? callback(err, this) : void 0;
      } else {
        return typeof callback === "function" ? callback(null, this) : void 0;
      }
    });
  };

  return Layout;

})();
